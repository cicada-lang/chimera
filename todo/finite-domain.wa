// `Within` is a special relation which requires
// its second argument to be a list of numbers
// i.e. to be grounded.

find q {
  Within [q, [1, 2, 3]]
  NotEq [q, 2]
}

// => [1, 3]

find [x, y, z] {
  Within [x, [1, 2, 3]]
  Within [y, [3, 4, 5]]
  Within [z, [5, 6, 9]]
  Within [z, [1, 2, 3, 5, 6, 7, 8]]
  x = y
}

// => [[3, 3, 5], [3, 3, 6]]

Lt [x, y] -- { LtEq [x, y] NotEq [x, y] }

// `Range` requires its second argument to be grounded.

find x {
  Lt [2, x]
  LtEq [x, 7]
  Range [x, [0, 10]]
}

// => [3, 4, 5, 6, 7]

// A variable used with finite domain constraints
// must have domain (or equal to a number).
// The follow in is error instead of fail.

find [x, y] {
  Lt [x, y]
  Lt [y, x]
}

// Unsatisfiable constraints, even when the variables are not
// referenced or associated with the run variable in any way,
// still result in failure.

find q {
  Within [x, [1, 2, 3]]
  Within [y, [1, 2, 3]]
  Within [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = 5
}

// => []

find q {
  Within [x, [1, 2, 3]]
  Within [y, [1, 2, 3]]
  Within [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = x
}

// => [1, 2, 3]

find q {
  Within [x, [1, 2, 3]]
  Within [y, [1, 2, 3]]
  Within [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = [x, z]
}

// => [[1, 2], [1, 3], [2, 1], [3, 1], [2, 3], [3, 2]]

find q {
  Within [q, [3, 4, 5, 6]]
  AllDiff [2, 3, q]
}

// => [4, 5, 6]

find [x, y, z] {
  Within [x, [1, 2, 3, 4, 5]]
  Within [y, [1, 2, 3, 4, 5]]
  Within [z, [1, 2, 3, 4, 5]]
  Lt [z, x]
  Add [y, 2, z]
}

// => [[4, 1, 3], [5, 1, 3], [5, 2, 4]]

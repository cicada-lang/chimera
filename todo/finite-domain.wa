// `In` is a special relation which requires
// its second argument to be a list of numbers
// i.e. to be grounded.

find q {
  In [q, [1, 2, 3]]
  NotEq [q, 2]
}

// => [1, 3]

find [x, y, z] {
  In [x, [1, 2, 3]]
  In [y, [3, 4, 5]]
  In [z, [5, 6, 9]]
  In [z, [1, 2, 3, 5, 6, 7, 8]]
  x = y
}

// => [[3, 3, 5], [3, 3, 6]]

Lt [x, y] -- { LtEq [x, y] NotEq [x, y] }

// `Range` requires its second argument to be grounded.

find x {
  Lt [2, x]
  LtEq [x, 7]
  Range [x, [0, 10]]
}

// => [3, 4, 5, 6, 7]

// A variable used with finite domain constraints
// must have domain (or equal to a number).
// The follow in is error instead of fail.

find [x, y] {
  Lt [x, y]
  Lt [y, x]
}

// Unsatisfiable constraints, even when the variables are not
// referenced or associated with the run variable in any way,
// still result in failure.

find q {
  In [x, [1, 2, 3]]
  In [y, [1, 2, 3]]
  In [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = 5
}

// => []

find q {
  In [x, [1, 2, 3]]
  In [y, [1, 2, 3]]
  In [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = x
}

// => [1, 2, 3]

find q {
  In [x, [1, 2, 3]]
  In [y, [1, 2, 3]]
  In [z, [1, 2, 3]]
  AllDiff [x, y, z]
  q = [x, z]
}

// => [[1, 2], [1, 3], [2, 1], [3, 1], [2, 3], [3, 2]]

find q {
  In [q, [3, 4, 5, 6]]
  AllDiff [2, 3, q]
}

// => [4, 5, 6]

find [x, y, z] {
  In [x, [1, 2, 3, 4, 5]]
  In [y, [1, 2, 3, 4, 5]]
  In [z, [1, 2, 3, 4, 5]]
  Lt [z, x]
  Add [y, 2, z]
}

// => [[4, 1, 3], [5, 1, 3], [5, 2, 4]]

// # 3.1.2 Watching cKanren Run

// NOTE This is one of the essential techniques
// of little book study, i.e. watch the interpreter run,
// or say, designing formal language
// to take about how the interpreter runs.

// TODO solution changes (as in the paper) to the exmaples.

find [y, z] {
  Range [x, [3, 5]]
  Range [z, [3, 5]]
  Range [y, [1, 4]]
  Lt [x, 5]
  x = y
}

// => [[3, 3], [4, 3], [3, 4], [4, 4], [3, 5], [4, 5]]

find [y, z] {
  Range [x, [3, 5]]
  Range [z, [3, 5]]
  Range [y, [1, 4]]
  x = y
  Lt [x, 5]
}

find [y, z] {
  x = y
  Lt [x, 5]
  Range [x, [3, 5]]
  Range [z, [3, 5]]
  Range [y, [1, 4]]
}

find q {
  Range [w, [1, 5]]
  Range [z, [1, 5]]
  AllDiff [q]
  q = [x, y, z]
  [x, y] = [1, 2]
  Add [x, y, w]
  Add [w, y, z]
}

// => [[1, 2, 5]]

// Use logic programming to play with many-valued logic.

clause Trilean(0)
clause Trilean(0.5)
clause Trilean(1)

// Name of the three values:

clause TrileanFalse(0)
clause TrileanMiddle(0.5)
clause TrileanTrue(1)

clause TrileanMin(0, 0, 0)
clause TrileanMin(0, 0.5, 0)
clause TrileanMin(0, 1, 0)
clause TrileanMin(0.5, 0, 0)
clause TrileanMin(0.5, 0.5, 0.5)
clause TrileanMin(0.5, 1, 0.5)
clause TrileanMin(1, 0, 0)
clause TrileanMin(1, 0.5, 0.5)
clause TrileanMin(1, 1, 1)

clause TrileanMax(0, 0, 0)
clause TrileanMax(0, 0.5, 0.5)
clause TrileanMax(0, 1, 1)
clause TrileanMax(0.5, 0, 0.5)
clause TrileanMax(0.5, 0.5, 0.5)
clause TrileanMax(0.5, 1, 1)
clause TrileanMax(1, 0, 1)
clause TrileanMax(1, 0.5, 1)
clause TrileanMax(1, 1, 1)

clause TrileanPositive(0.5)
clause TrileanPositive(1)

// Use mutually exclusive cases.

clause TrileanMul(0, y, 0) -- { Trilean(y) }
clause TrileanMul(x, 0, 0) -- { TrileanPositive(x) }
clause TrileanMul(x, y, z) -- {
  TrileanPositive(x)
  TrileanPositive(y)
  TrileanMax(x, y, z)
}

// See how `TrileanMax` is different from `TrileanMul`:

find [x, y, z] { TrileanMax(x, y, z) }
find [x, y, z] { TrileanMul(x, y, z) }

// What returns 0?
find [x, y] { TrileanMul(x, y, 0) }

// [question] Can `TrileansMul` be defined by
// composition of other connectives (not, min, max)?
// Does this means to use only one clause?

// [question] How to search high-order things
// like connective in logic programming?
// We want to search how to construct truth function
// by composition of given set of connectives.
// Maybe we must define first order expressions first.

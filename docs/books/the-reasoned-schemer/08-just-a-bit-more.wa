import {
  Positive,
  GreaterThanOne,
  Add,
} from "07-a-bit-too-much.wa"

Mul [[], m, []]
Mul [n, [], []] -- { Positive n }
Mul [[1], m, m] -- { Positive m }
Mul [n, [1], n] -- { GreaterThanOne n }
Mul [[0, ...x], m, [0, ...z]] -- { Positive x Positive z GreaterThanOne m Mul [x, m, z] }
Mul [[1, ...x], [0, ...y], p] -- { Positive x Positive y Mul [[0, ...y], [1, ...x], p] }
Mul [[1, ...x], [1, ...y], p] -- { Positive x Positive y MulOdd [x, [1, ...x], [1, ...y], p] }

// x = (n - 1) / 2

MulOdd [x, n, m, p]
-------------------- {
  MulBound [q, p, n, m]
  Mul [x, m, q]
  Add [[0, ...q], m, p]
}

// NOTE Limit the length of the q above.

MulBound [[], p, n, m] -- { Positive p }
MulBound [[a0, ...x], [a1, ...y], [], [a2, ...z]] -- { MulBound [x, y, z, []] }
MulBound [[a0, ...x], [a1, ...y], [a2, ...z], m] -- { MulBound [x, y, z, m] }

find [x, y, r] limit 10 {
  Mul [x, y, r]
}

find p {
  Mul [[0, 1], [0, 0, 1], p]
}

find [x, y, r] limit 1 {
  x = [1, 1]
  y = [1, 1]
  r = [1, 0, 0, 1]
  Mul [x, y, r]
}

find [n, m] limit 1 {
  Mul [n, m, [1]]
}

find [n, m] limit 2 {
  Mul [n, m, [1, 1]]
}

// NOTE Without MulBound,
// the following query has no value,
// because Mul tries
//   n = 2, 3, 4, ...
//   m = 2, 3, 4, ...
// We need MulBound to make this query fail.

find [n, m] limit 1 {
  GreaterThanOne n
  GreaterThanOne m
  Mul [n, m, [1, 1]]
}

// NOTE With MulBound we can also
// safely do the following query:

find [n, m] {
  Mul [n, m, [1]]
}

find p {
  Mul [[1, 1, 1], [1, 1, 1, 1, 1, 1], p]
}

EqualLength [[], []]
EqualLength [[1], [1]]
EqualLength [[a, ...x], [b, ...y]]
----------------------------------- {
  Positive x
  Positive y
  EqualLength [x, y]
}

find [w, x, y] {
  EqualLength [[1, w, x, ...y], [0, 1, 1, 0, 1]]
}

find b {
  EqualLength [[1], [b]]
}

find n {
  EqualLength [[1, 0, 1, ...n], [0, 1, 1, 0, 1]]
}

find [y, z] limit 5 {
  EqualLength [[1, ...y], [1, ...z]]
}

find [y, z] limit 5 {
  EqualLength [[1, ...y], [0, ...z]]
}

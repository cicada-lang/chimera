import { Null, Cons, Car, Cdr } from "02-teaching-old-toys-new-tricks.wa"

Mem [x, l, out]
--------------- {
  Car [l, x]
  out = l
}

Mem [x, l, out]
--------------- {
  Cdr [l, d]
  Mem [x, d, out]
}

find x {
  Mem [
    "fig",
    ["roll", "okra", "fig", "beet", "roll", "pea"],
    x,
  ]
}

find x {
  Mem [
    "fig",
    ["roll", "okra", "beet", "beet", "roll", "pea"],
    x,
  ]
}

find _ {
  Mem ["fig", ["pea"], ["pea"]]
}

find out {
  Mem ["fig", ["fig"], out]
}

find out {
  Mem ["fig", ["fig", "pea"], out]
}

find x {
  Mem [
    x,
    ["roll", "okra", "fig", "beet", "roll", "pea"],
    ["fig", "beet", "roll", "pea"],
  ]
}

find x {
  Mem ["fig", ["fig", "pea"], ["pea", x]]
}

find x {
  Mem ["fig", ["fig", "pea"], [x, "pea"]]
}

find out {
  Mem ["fig", ["fig", "fig", "pea"], out]
}

find out {
  Mem ["fig", ["a", _x, "c", "fig", "e"], out]
}

find [x, y] limit 5 {
  Mem ["fig", ["fig", "d", "fig", "e" | y], x]
}

Rember [_x, l, out]
------------------ {
  Null l
  Null out
}

Rember [x, l, out]
------------------ {
  Car [l, x]
  Cdr [l, out]
}

Rember [x, l, out]
------------------ {
  Cdr [l, d]
  Rember [x, d, res]
  Car [l, a]
  Cons [a, res, out]
}

find out {
  Rember ["pea", ["a", "b", "pea", "d", "pea", "e"], out]
}

find out {
  Rember ["pea", ["pea"], out]
}

find out {
  Rember ["pea", ["pea", "pea"], out]
}

find out {
  Rember ["pea", ["pea", "pea", "pea"], out]
}

find out {
  Rember [y, ["a", "b", y, "d", _z, "e"], out]
}

find [y, z] {
  Rember [y, [y, "d", z, "e"], [y, "d", "e"]]
}

find [y, z, w, out] limit 4 {
  Rember [y, [z | w], out]
}

find [y, z, w, out] limit 5 {
  Rember [y, [z | w], out]
}

// But should the following succeed?
// We will need != to implementation a version
// that does not succeed on the following query.

find _ {
  Rember [1, [1, 2, 3], [1, 2, 3]]
}

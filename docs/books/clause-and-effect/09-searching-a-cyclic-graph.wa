clause Edge("g", "h")
clause Edge("d", "a")
clause Edge("g", "d")
clause Edge("e", "d")
clause Edge("h", "f")
clause Edge("e", "f")
clause Edge("a", "e")
clause Edge("a", "b")
clause Edge("b", "f")
clause Edge("b", "c")
clause Edge("f", "c")

// "a", "e", "d" -- in a loop

// We define `Legal` to rule out loop -- to avoid searching in a loop

clause Legal(_, [])

clause Legal(z, [head | tail])
---------------------------- {
  z != head
  Legal(z, tail)
}

clause Path(x, x, _occurs)

clause Path(x, y, occurs)
------------------------ {
  Edge(x, z)
  Legal(z, occurs)
  Path(z, y, [z | occurs])
}

find _ { Path("f", "f", []) }
find _ { Path("a", "c", []) }
find _ { Path("g", "e", []) }

find x { Path("g", x, []) }
find x { Path(x, "h", []) }

find _ { Path("g", "c", []) }
find _ { Path("g", "c", ["f"]) }

find _ { Path("a", _x, ["f", "d"]) }
find _ { Path("a", _x, []) }

Exp Exp::var(name)
Exp Exp::fn(name, ret) -- { Exp ret }
Exp Exp::ap(target, arg) -- { Exp target Exp arg }

// datatype Exp {
//   var(name)
//   fn(name, ret) -- { Exp ret }
//   ap(target, arg) -- { Exp target Exp arg }
// }

Type Type::atom(name)
Type Type::arrow(argType, retType) -- { Type argType Type retType }

Ctx []
Ctx [[name, type] | rest] -- { Type type Ctx rest }

Lookup [[[key, value] | rest], key, value]

Lookup [[[key, value] | rest], name, found]
------------------------------------------------------ {
  key != name
  Lookup [rest, name, found]
}

// TODO We need to understand and improve our search strategy
// to make the following perform the same as the above.

// Lookup [[[key, value] | rest], name, found]
// -------------------------------------------- {
//   disj {
//     conj { key = name found = value }
//     conj { key != name Lookup [rest, name, found] }
//   }
// }

Check [ctx, Exp::var(name), type]
---------------------------------- {
  Lookup [ctx, name, type]
}

Check [ctx, Exp::fn(name, ret), Type::arrow(argType, retType)]
---------------------------------------------------------------- {
  Check [[[name, argType] | ctx], ret, retType]
}

Check [ctx, Exp::ap(target, arg), retType]
----------------------------------------- {
  Check [ctx, target, Type::arrow(argType, retType)]
  Check [ctx, arg, argType]
}

find type {
  ctx = []
  exp = Exp::fn("x", Exp::var("x"))
  Check [ctx, exp, type]
}

find exp limit 10 {
  ctx = []
  type = Type::arrow("A", "A")
  Check [ctx, exp, type]
}

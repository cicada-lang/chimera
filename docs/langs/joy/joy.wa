// Small step operational semantics of a Forth-like language.

Append [[], t, t]

Append [[a | d], t, out]
------------------------- {
  Append [d, t, res]
  out = [a | res]
}

Step [
  [stack, [[quoted] | rest]],
  [[[quoted] | stack], rest],
]

Step [
  [[quoted | stack], ["apply" | rest]],
  [stack, result],
] -- {
  Append [quoted, rest, result]
}


Step [
  [[car, cdr | stack], ["cons" | rest]],
  [[[car | cdr] | stack], rest],
]

Step [
  [[x | stack], ["dup" | rest]],
  [[x, x | stack], rest],
]

Step [
  [[_x | stack], ["drop" | rest]],
  [stack, rest],
]

Step [
  [[x, y | stack], ["swap" | rest]],
  [[y, x | stack], rest],
]

Step [
  [[x, y | stack], ["over" | rest]],
  [[y, x, y | stack], rest],
]

Step [
  [[x, y, z | stack], ["rot" | rest]],
  [[z, y, x | stack], rest],
]

Step [
  [stack, ["lit", value | rest]],
  [[value | stack], rest],
]

Eval [start, end]
-------------------- {
  Step [start, end]
}

Eval [start, end]
------------------ {
  Step [start, next]
  Eval [next, end]
}

find end {
  start = [
    [1, 2, 3],
    ["swap", "drop", "swap", "drop"],
  ]
  Eval [start, end]
}

find end {
  start = [
    [[], 1, 2, 3],
    ["swap", "cons", "swap", "cons", "swap", "cons"],
  ]
  Eval [start, end]
}

assert not find end {
  start = [[], ["hello", "world"]]
  Eval [start, end]
}

find words limit 10 {
  start = [[], words]
  end = [["I", "love", "you"], []]
  Eval [start, end]
}

// Try to solve something like quine.

find words limit 1 {
  start = [[], [words, "apply"]]
  end = [words, []]
  Eval [start, end]
}

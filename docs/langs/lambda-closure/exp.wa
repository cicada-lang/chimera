Exp Exp::var(_name)
Exp Exp::fn(_name, ret) -- { Exp ret }
Exp Exp::ap(target, arg) -- { Exp target Exp arg }

Value Value::closure(_name, ret, env) -- { Exp ret Env env }

Env []
Env [[_name, value] | rest] -- { Value value Env rest }

Lookup [[[key, value] | _rest], key, value]

Lookup [[[key, _value] | rest], name, found]
------------------------------------------------------ {
  key != name
  Lookup [rest, name, found]
}

// Lookup [[[key, value] | rest], name, found]
// -------------------------------------------- {
//   disj {
//     conj { key = name found = value }
//     conj { key != name Lookup [rest, name, found] }
//   }
// }

find q {
  Lookup [[["x", "foo"], ["y", "bar"]], "y", q]
}

find q {
  Lookup [[["x", "foo"], ["y", "bar"]], "w", q]
}

Eval [env, Exp::var(name), value]
---------------------------------- var {
  Lookup [env, name, value]
}

Eval [env, Exp::fn(name, ret), value]
---------------------------------------- fn {
  value = Value::closure(name, ret, env)
}

Eval [env, Exp::ap(target, arg), value]
---------------------------------------- ap {
  Eval [env, target, Value::closure(name, ret, env2)]
  Eval [env, arg, argValue]
  Eval [[[name, argValue] | env2], ret, value]
}

find exp limit 5 {
  value = Value::closure("y", Exp::var("x"), [
    ["x", Value::closure("z", Exp::var("z"), [])]
  ])
  Eval [[], exp, value]
}

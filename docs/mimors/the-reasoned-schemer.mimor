<theme color="orange" />

<question>
  What is a goal?

  <answer>
    It is something that either succeeds, fails, or has no value.
  </answer>
</question>

<question>
  What is a fresh variable?

  <answer>
    Every variable is initially fresh.

    A variable is no longer fresh
    if it becomes associated with a non-variable value
    or if it becomes associated with a variable that,
    itself, is no longer fresh.
  </answer>
</question>

<question>
  When are two variables different?

  <answer>
    Two variables are different if they have not been fused.

    Every variable introduced by fresh (or run*)
    is initially different from every other variable.
  </answer>
</question>

<question>
  What does it mean for x to occur?

  <answer>
    A variable x occurs in a variable y
    when x (or any variable fused with x)
    appears in the value associated with y.
  </answer>
</question>

<question>
  When do we say a variable occurs in a list?

  <answer>
    A variable x occurs in a list l
    when x (or any variable fused with x) is an element of l,
    or when x occurs in an element of l.
  </answer>
</question>

<question>
  What is a relation?

  <answer>
    A relation is a kind of function that,
    when given arguments, produces a goal.

    Thanks, Robert A. Kowalski (1941 --).
  </answer>
</question>

<question>
  The Second Law of unify

  <answer>
    If x is fresh, then

    <code>
      v = x
    </code>

    succeeds and associates v with x,
    unless x occurs in v.
  </answer>
</question>

<question>
  The First Law of unify

  <answer>
    <code>
      v = w
    </code>

    can be replaced by

    <code>
      w = v
    </code>
  </answer>
</question>

<question>
  What does the "e" in conde stand for?

  <answer>
    It stands for every,
    since every successful conde line
    contributes one or more values (to the solution).
  </answer>
</question>

<question>
  How do we translate a function into a relation?

  <answer>
    The Translation (Initial)

    To translate a function into a relation,
    first replace define with defrel.

    Then unnest each expression in each cond line,
    and replace each cond with conde.

    To unnest a #t, replace it with #s.

    To unnest a #f, replace it with #u.
  </answer>
</question>

<question>
  The Law of #u (fail)

  <answer>
    Any conde line that has #u as a top-level goal cannot contribute values.
  </answer>
</question>

<question>
  The Law of #s (success)

  <answer>
    Any top-level #s can be removed from a conde line.
  </answer>
</question>

<question>
  How do we translate a function into a relation?

  <answer>
    The Translation (Final)

    To translate a function into a relation,
    first replace define with defrel.

    Then unnest each expression in each cond line,
    and replace each cond with conde.

    To unnest a #t, replace it with #s.

    To unnest a #f, replace it with #u.

    If the value of at least one cond line can be a non-Boolean,
    add an argument, say out, to defrel to hold
    what would have been the function's value.

    When unnesting a line whose value is not a Boolean,
    ensure that either some value is associated with out,
    or that out is the last argument to a recursion.
  </answer>
</question>

<question>
  The First Commandment

  <answer>
    Within each sequence of goals,
    move non-recursive goals before recursive goals.
  </answer>
</question>

<question>
  The Law of Swapping conde Lines

  <answer>
    Swapping two conde lines
    does not affect the values contributed by conde.
  </answer>
</question>

<question>
  When can we rearrange these cond lines in any order?

  <answer>
    When the cond questions satisfy the non-overlapping property.
  </answer>
</question>
